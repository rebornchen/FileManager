<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Xml" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #> 
//  导入MultipleOutputHelper.ttinclude文件      
<#@include file="$(SolutionDir)\CL.Model\T4\MultipleOutputHelper.ttinclude"#>       
<#                                             
		ModelManager manager = new ModelManager();      
		var manager1 = Manager.Create(Host, GenerationEnvironment);     
		DataTable table= manager.GetSchema();   
		if(table==null || table.Rows.Count==0)return "";      
		string tabname = "",temporary="";      
		DataRow[] tabs = table.Select("colSortNumber=1");     
		if (tabs== null || tabs.Length == 0)return ""; 
		 
		foreach (DataRow tab in tabs)
		{
			tabname = temporary = tab["tabName"].ToString();
			 
			string[] array = tabname.Split('_');
			tabname = array.Length > 1 ? array[1] : array[0];
			if (array.Length > 1 && (array[0] == "Temp"||array[0] == "tmp") )
			{
				continue;
			}

			// 定义输出文件
			manager1.StartNewFile(tabname+".cs");
#>

//-------------------------------------------------------------------

//版权所有：版权所有(C) 2016，CL
//系统名称： 
//文件名称：<#=tabname#>.cs
//模块名称：
//作　　者：Chenlin
//创建时间：2015/4/11 
//功能说明：
//-----------------------------------------------------------------
//修改记录： 
//修改人：   
//修改时间： 
//修改内容： 
//-----------------------------------------------------------------  
using NLite; 
using System;
using NLite.Data;    
using Newtonsoft.Json; 
using CL.Model.Interfaces;
namespace CL.Model   
{
	/// <summary>
	/// <#=tab["tabComment"].ToString()#>
	/// </summary>
	[Serializable]
	[Table("<#=temporary#>")]
	public partial class <#=string.Format("{0} : IEntity", tabname)#>    
	{
		#region Model
<#			
			DataRow[] rows = table.Select(string.Format("tabName='{0}'", tab["tabName"].ToString()), "colSortNumber asc");
			if (rows != null && rows.Length > 0)
			{
				foreach (var row in rows)
				{
#>
		/// <summary>
		/// <#=row["ColComment"].ToString()#>
		/// </summary>
<#
					if (row["ColIdentity"].ToString() == "1")
					{
#>
		[Id(IsDbGenerated = true)]
<#
					}
					else if (row["ColPrimaryKey"].ToString() == "1")
					{
#>
		[Id]
<#
					}
#>
<#
					string datatype = manager.Translate(row["ColDataType"].ToString());
					string nulltext = datatype!="string" && row["colNullable"].ToString() == "1" ? "?" : "";
					int dataLength = Convert.ToInt32(row["colDataLength"]);
					dataLength = dataLength == -1 ? 10000 : dataLength;
					//int dataLength = Convert.ToInt32(row["colBytesLength"]);
					if (datatype == "string" && dataLength > 255) 
					{
#>
		[Column(Length=<#= dataLength #>)]
<#
					}
#>
		public <#=string.Format("{0}{1} {2} {3}", datatype, nulltext, row["ColName"].ToString(), "{ get; set; }")#>
<#			
				}
			}
#>
		#endregion
	}
}
   <# 
	   // 结束输出文件
		manager1.EndBlock();
	} 
	 
       // 执行编译

       manager1.Process(true);  

    #> 
	 

<#+
		public class ModelManager
		{  
			#region Const_String_CONNSTRING_DATASCHEMA
			/// <summary>  
			/// 数据库连接字符串      
			/// </summary>
			private const string CONNSTRING = @"Data Source=127.0.0.1;Initial Catalog=FileManagerDb;Persist Security Info=True;User ID=sa;Password=123456";
	 		
			/// <summary>  
			/// 
			/// </summary> 
			private const string DATASCHEMA = @"select *
			 from(
			select
			[tabName]=d.name,
			[tabComment]=case when a.colorder=1 then isnull(f.value,'') else '' end,
			[colSortNumber]=a.colorder,
			[colName]=a.name,
			[colIdentity]=case when COLUMNPROPERTY( a.id,a.name,'IsIdentity')=1 then '1'else '' end,
			[colPrimaryKey]=case when exists(SELECT 1 FROM sysobjects where xtype='PK' and parent_obj=a.id and name in (
			SELECT name FROM sysindexes WHERE indid in(
			SELECT indid FROM sysindexkeys WHERE id = a.id AND colid=a.colid
			))) then '1' else '' end,
			[colDataType]=b.name,
			[colBytesLength]=a.length,
			[colDataLength]=COLUMNPROPERTY(a.id,a.name,'PRECISION'),
			[colPrecision]=isnull(COLUMNPROPERTY(a.id,a.name,'Scale'),0),
			[colNullable]=case when a.isnullable=1 then '1'else '' end,
			[colDefaultValue]=isnull(e.text,''),
			[colComment]=isnull(g.[value],'')
			FROM syscolumns a
			left join systypes b on a.xusertype=b.xusertype
			inner join sysobjects d on a.id=d.id  and d.xtype='U' and  d.name<>'dtproperties'
			left join syscomments e on a.cdefault=e.id
			left join sys.extended_properties g on a.id=g.major_id and a.colid=g.minor_id 
			left join sys.extended_properties f on d.id=f.major_id and f.minor_id=0
			union
			select 
			[tabName]=d.name,
			[tabComment]='',
			[colSortNumber]=a.colorder,
			[colName]=a.name,
			[colIdentity]='',
			[colPrimaryKey]='',
			[colDataType]=b.name,
			[colBytesLength]=a.length,
			[colDataLength]=COLUMNPROPERTY(a.id,a.name,'PRECISION'),
			[colPrecision]=isnull(COLUMNPROPERTY(a.id,a.name,'Scale'),0),
			[colNullable]=case when a.isnullable=1 then '1'else '' end,
			[colDefaultValue]='',
			[colComment]=''
			from syscolumns a
			join systypes b on a.xusertype=b.xusertype
			join sysobjects d on a.id=d.id and d.xtype='V'
			) a order by a.tabName,a.colSortNumber";
			#endregion
			/// <summary>
			/// 
			/// </summary>
			/// <param name="tableName"></param>
			public DataTable GetSchema() 
			{
				DataTable table = new DataTable();
				using (SqlConnection conn = new SqlConnection(CONNSTRING))
				{
					SqlCommand cmd = new SqlCommand(DATASCHEMA, conn);
					SqlDataAdapter adapter = new SqlDataAdapter(cmd);
					adapter.Fill(table);
				}
				return table;
			}
			/// <summary>
			/// 
			/// </summary>
			/// <param name="colDataType"></param>
			/// <returns></returns>
			public string Translate(string colDataType)
			{
				SqlDbType dbType = (SqlDbType)Enum.Parse(typeof(SqlDbType), colDataType, true);
				switch (dbType)
				{
					case SqlDbType.BigInt: return "long";
					case SqlDbType.Binary: return "byte[]";
					case SqlDbType.Bit: return "bool";
					case SqlDbType.Char: return "string";
					case SqlDbType.Date: return "DateTime";
					case SqlDbType.DateTime: return "DateTime";
					case SqlDbType.DateTime2: return "DateTime";
					case SqlDbType.DateTimeOffset: return "DateTime";
					case SqlDbType.Decimal: return "decimal";
					case SqlDbType.Float: return "double";
					case SqlDbType.Image: return "byte[]";
					case SqlDbType.Int: return "int";
					case SqlDbType.Money: return "decimal";
					case SqlDbType.NChar: return "string";
					case SqlDbType.NText: return "string";
					case SqlDbType.NVarChar: return "string";
					case SqlDbType.Real: return "Single";
					case SqlDbType.SmallDateTime: return "DateTime"; 
					case SqlDbType.SmallInt: return "Int16";
					case SqlDbType.SmallMoney: return "decimal";
					case SqlDbType.Structured: return "string";
					case SqlDbType.Text: return "string";
					case SqlDbType.Time: return "DateTime";
					case SqlDbType.Timestamp: return "DateTime";
					case SqlDbType.TinyInt: return "byte";
					case SqlDbType.Udt: return "string";
					case SqlDbType.UniqueIdentifier: return "Guid";
					case SqlDbType.VarBinary: return "byte[]";
					case SqlDbType.VarChar: return "string";
					case SqlDbType.Variant: return "byte[]";
					case SqlDbType.Xml: return "string";
					default: return "string";
				}
			}
		}
#>